// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/drop.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Drop struct {
	Uid    uint64                                   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Owner  string                                   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Pair   string                                   `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	Drops  github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,4,opt,name=drops,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"drops"`
	Sum    github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,5,opt,name=sum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sum"`
	Active bool                                     `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Rate1  []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,rep,name=rate1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rate1"`
	Prev1  uint64                                   `protobuf:"varint,8,opt,name=prev1,proto3" json:"prev1,omitempty"`
	Next1  uint64                                   `protobuf:"varint,9,opt,name=next1,proto3" json:"next1,omitempty"`
	Rate2  []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,rep,name=rate2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rate2"`
	Prev2  uint64                                   `protobuf:"varint,11,opt,name=prev2,proto3" json:"prev2,omitempty"`
	Next2  uint64                                   `protobuf:"varint,12,opt,name=next2,proto3" json:"next2,omitempty"`
}

func (m *Drop) Reset()         { *m = Drop{} }
func (m *Drop) String() string { return proto.CompactTextString(m) }
func (*Drop) ProtoMessage()    {}
func (*Drop) Descriptor() ([]byte, []int) {
	return fileDescriptor_3961bee11a1276cb, []int{0}
}
func (m *Drop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Drop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Drop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Drop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Drop.Merge(m, src)
}
func (m *Drop) XXX_Size() int {
	return m.Size()
}
func (m *Drop) XXX_DiscardUnknown() {
	xxx_messageInfo_Drop.DiscardUnknown(m)
}

var xxx_messageInfo_Drop proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Drop)(nil), "onomyprotocol.market.market.Drop")
}

func init() { proto.RegisterFile("market/drop.proto", fileDescriptor_3961bee11a1276cb) }

var fileDescriptor_3961bee11a1276cb = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x14, 0xec, 0x7e, 0x2d, 0x7c, 0xb0, 0x7a, 0xd0, 0x0d, 0x31, 0x2f, 0x9a, 0x2c, 0x8d, 0x07, 0xc3,
	0xc5, 0x36, 0xd4, 0x3f, 0x60, 0x08, 0x17, 0x6f, 0xa6, 0x47, 0x6f, 0xa5, 0x6c, 0xb0, 0xc1, 0xf6,
	0x35, 0xdb, 0x05, 0xe1, 0x5f, 0xf8, 0xab, 0x0c, 0x47, 0x8e, 0xc4, 0x03, 0x11, 0xf8, 0x23, 0x66,
	0xb7, 0x6d, 0xd0, 0x2b, 0xa7, 0x9d, 0x99, 0xd7, 0xe9, 0x4c, 0x5e, 0x1e, 0xbd, 0x4c, 0x23, 0x39,
	0x15, 0xca, 0x1f, 0x4b, 0xcc, 0xbd, 0x5c, 0xa2, 0x42, 0x76, 0x83, 0x19, 0xa6, 0x4b, 0x83, 0x63,
	0x7c, 0xf3, 0xca, 0x0f, 0xaa, 0xe7, 0xba, 0x33, 0xc1, 0x09, 0x9a, 0x99, 0xaf, 0x51, 0x69, 0xb9,
	0xfd, 0xb4, 0xa9, 0x33, 0x94, 0x98, 0xb3, 0x0b, 0x6a, 0xcf, 0x92, 0x31, 0x10, 0x97, 0xf4, 0x9c,
	0x50, 0x43, 0xd6, 0xa1, 0x0d, 0x7c, 0xcf, 0x84, 0x84, 0x7f, 0x2e, 0xe9, 0xb5, 0xc3, 0x92, 0x30,
	0x46, 0x9d, 0x3c, 0x4a, 0x24, 0xd8, 0x46, 0x34, 0x98, 0x0d, 0x69, 0x43, 0xb7, 0x28, 0xc0, 0xd1,
	0xe2, 0xc0, 0x5b, 0x6d, 0xbb, 0xd6, 0xd7, 0xb6, 0x7b, 0x37, 0x49, 0xd4, 0xeb, 0x6c, 0xe4, 0xc5,
	0x98, 0xfa, 0x31, 0x16, 0x29, 0x16, 0xd5, 0x73, 0x5f, 0x8c, 0xa7, 0xbe, 0x5a, 0xe6, 0xa2, 0xf0,
	0x9e, 0x32, 0x15, 0x96, 0x66, 0xf6, 0x48, 0xed, 0x62, 0x96, 0x42, 0xe3, 0xa4, 0x7f, 0x68, 0x2b,
	0xbb, 0xa2, 0xcd, 0x28, 0x56, 0xc9, 0x5c, 0x40, 0xd3, 0x25, 0xbd, 0x56, 0x58, 0x31, 0xdd, 0x4f,
	0x46, 0x4a, 0xf4, 0xe1, 0xbf, 0x6b, 0x9f, 0xd2, 0xcf, 0x98, 0xf5, 0x3e, 0x72, 0x29, 0xe6, 0x7d,
	0x68, 0x99, 0x1d, 0x95, 0x44, 0xab, 0x99, 0x58, 0xa8, 0x3e, 0xb4, 0x4b, 0xd5, 0x90, 0x3a, 0x31,
	0x00, 0x7a, 0x7a, 0x62, 0x50, 0x27, 0x06, 0x70, 0x76, 0x4c, 0x0c, 0xea, 0xc4, 0x00, 0xce, 0x8f,
	0x89, 0xc1, 0xe0, 0x79, 0xb5, 0xe3, 0xd6, 0x66, 0xc7, 0xc9, 0x6a, 0xcf, 0xc9, 0x7a, 0xcf, 0xc9,
	0xf7, 0x9e, 0x93, 0x8f, 0x03, 0xb7, 0xd6, 0x07, 0x6e, 0x6d, 0x0e, 0xdc, 0x7a, 0xf1, 0x7e, 0x85,
	0xff, 0x39, 0x14, 0xbf, 0xba, 0xa4, 0x45, 0x0d, 0x4c, 0x91, 0x51, 0xd3, 0xcc, 0x1f, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x56, 0x32, 0xec, 0x69, 0x02, 0x00, 0x00,
}

func (m *Drop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Drop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Drop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Next2 != 0 {
		i = encodeVarintDrop(dAtA, i, uint64(m.Next2))
		i--
		dAtA[i] = 0x60
	}
	if m.Prev2 != 0 {
		i = encodeVarintDrop(dAtA, i, uint64(m.Prev2))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Rate2) > 0 {
		for iNdEx := len(m.Rate2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Rate2[iNdEx].Size()
				i -= size
				if _, err := m.Rate2[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintDrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Next1 != 0 {
		i = encodeVarintDrop(dAtA, i, uint64(m.Next1))
		i--
		dAtA[i] = 0x48
	}
	if m.Prev1 != 0 {
		i = encodeVarintDrop(dAtA, i, uint64(m.Prev1))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rate1) > 0 {
		for iNdEx := len(m.Rate1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Rate1[iNdEx].Size()
				i -= size
				if _, err := m.Rate1[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintDrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Sum.Size()
		i -= size
		if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Drops.Size()
		i -= size
		if _, err := m.Drops.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintDrop(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDrop(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintDrop(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovDrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Drop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovDrop(uint64(m.Uid))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDrop(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovDrop(uint64(l))
	}
	l = m.Drops.Size()
	n += 1 + l + sovDrop(uint64(l))
	l = m.Sum.Size()
	n += 1 + l + sovDrop(uint64(l))
	if m.Active {
		n += 2
	}
	if len(m.Rate1) > 0 {
		for _, e := range m.Rate1 {
			l = e.Size()
			n += 1 + l + sovDrop(uint64(l))
		}
	}
	if m.Prev1 != 0 {
		n += 1 + sovDrop(uint64(m.Prev1))
	}
	if m.Next1 != 0 {
		n += 1 + sovDrop(uint64(m.Next1))
	}
	if len(m.Rate2) > 0 {
		for _, e := range m.Rate2 {
			l = e.Size()
			n += 1 + l + sovDrop(uint64(l))
		}
	}
	if m.Prev2 != 0 {
		n += 1 + sovDrop(uint64(m.Prev2))
	}
	if m.Next2 != 0 {
		n += 1 + sovDrop(uint64(m.Next2))
	}
	return n
}

func sovDrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDrop(x uint64) (n int) {
	return sovDrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Drop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Drop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Drop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drops", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Drops.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Rate1 = append(m.Rate1, v)
			if err := m.Rate1[len(m.Rate1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev1", wireType)
			}
			m.Prev1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prev1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next1", wireType)
			}
			m.Next1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Rate2 = append(m.Rate2, v)
			if err := m.Rate2[len(m.Rate2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev2", wireType)
			}
			m.Prev2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prev2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next2", wireType)
			}
			m.Next2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDrop = fmt.Errorf("proto: unexpected end of group")
)
