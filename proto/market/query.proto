syntax = "proto3";
package pendulumlabs.market.market;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "market/params.proto";
import "market/pool.proto";
import "market/drop.proto";
import "market/member.proto";
import "market/burnings.proto";
import "market/order.proto";
import "market/asset.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/pendulum-labs/market/x/market/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pendulum-labs/market/market/params";
  }
  // Queries a Pool by index.
	rpc Pool(QueryGetPoolRequest) returns (QueryGetPoolResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/pool/{pair}/{denom1}/{denom2}/{leader}";
	}

	// Queries a list of Pool items.
	rpc PoolAll(QueryAllPoolRequest) returns (QueryAllPoolResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/pool";
	}

// Queries a Drop by index.
	rpc Drop(QueryGetDropRequest) returns (QueryGetDropResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/drop/{uid}/{owner}/{pair}";
	}

	// Queries a list of Drop items.
	rpc DropAll(QueryAllDropRequest) returns (QueryAllDropResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/drop";
	}

// Queries a Member by index.
	rpc Member(QueryGetMemberRequest) returns (QueryGetMemberResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/member/{pair}/{denomA}/{denomB}";
	}

	// Queries a list of Member items.
	rpc MemberAll(QueryAllMemberRequest) returns (QueryAllMemberResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/member";
	}

// Queries a Burnings by index.
	rpc Burnings(QueryGetBurningsRequest) returns (QueryGetBurningsResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/burnings/{denom}";
	}

	// Queries a list of Burnings items.
	rpc BurningsAll(QueryAllBurningsRequest) returns (QueryAllBurningsResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/burnings";
	}

// Queries a Order by index.
	rpc Order(QueryGetOrderRequest) returns (QueryGetOrderResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/order/{uid}";
	}

	// Queries a list of Order items.
	rpc OrderAll(QueryAllOrderRequest) returns (QueryAllOrderResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/order";
	}

// Queries a Asset by index.
	rpc Asset(QueryGetAssetRequest) returns (QueryGetAssetResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/asset/{active}/{owner}/{assetType}";
	}

	// Queries a list of Asset items.
	rpc AssetAll(QueryAllAssetRequest) returns (QueryAllAssetResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/asset";
	}

// Queries a list of GetBook items.
	rpc Book(QueryGetBookRequest) returns (QueryGetBookResponse) {
		option (google.api.http).get = "/pendulum-labs/market/market/get_book/{denomA}/{denomB}/{orderType}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetPoolRequest {
	string pair = 1;
	string denom1 = 2;
	string denom2 = 3;
	string leader = 4;
}

message QueryGetPoolResponse {
	Pool pool = 1 [(gogoproto.nullable) = false];
}

message QueryAllPoolRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPoolResponse {
	repeated Pool pool = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDropRequest {
	  uint64 uid = 1;
  string owner = 2;
  string pair = 3;

}

message QueryGetDropResponse {
	Drop drop = 1 [(gogoproto.nullable) = false];
}

message QueryAllDropRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDropResponse {
	repeated Drop drop = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetMemberRequest {
	  string pair = 1;
  string denomA = 2;
  string denomB = 3;

}

message QueryGetMemberResponse {
	Member member = 1 [(gogoproto.nullable) = false];
}

message QueryAllMemberRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMemberResponse {
	repeated Member member = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBurningsRequest {
	  string denom = 1;

}

message QueryGetBurningsResponse {
	Burnings burnings = 1 [(gogoproto.nullable) = false];
}

message QueryAllBurningsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBurningsResponse {
	repeated Burnings burnings = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetOrderRequest {
	  uint64 uid = 1;
  string owner = 2;
  bool active = 3;
  string orderType = 4;
  string denomAsk = 5;
  string denomBid = 6;

}

message QueryGetOrderResponse {
	Order order = 1 [(gogoproto.nullable) = false];
}

message QueryAllOrderRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOrderResponse {
	repeated Order order = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAssetRequest {
	  bool active = 1;
  string owner = 2;
  string assetType = 3;

}

message QueryGetAssetResponse {
	Asset asset = 1 [(gogoproto.nullable) = false];
}

message QueryAllAssetRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAssetResponse {
	repeated Asset asset = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBookRequest {
  string denomA = 1;
  string denomB = 2;
  string orderType = 3;
cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message QueryGetBookResponse {
	repeated OrderResponse book = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
